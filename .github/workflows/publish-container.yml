name: Publish container
on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string
      platforms:
        required: false
        type: string
        default: linux/amd64
      container_name:
        required: true
        type: string
      container_tag:
        required: false
        type: string
      buildx_args:
        required: false
        type: string
    secrets:
      BUILD_WEBHOOK_URL:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_TOKEN:
        required: true

jobs:
  container:
    runs-on: ubuntu-20.04
    steps:
      - uses: act10ns/slack@v1.5.1
        with:
          status: starting
          channel: "#builds"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.BUILDS_WEBHOOK_URL }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - uses: actions/checkout@v2

      # Needed for buildx gha cache to work
      - name: Expose GitHub runtime for caching
        uses: crazy-max/ghaction-github-runtime@v1

      - name: buildx
        env:
          INPUT_CONTAINER_TAG: ${{ inputs.container_tag || github.event.pull_request.head.ref }}
        run: |
          set -x

          CONTAINER_TAG=${INPUT_CONTAINER_TAG:-${GITHUB_REF#refs/heads/}}

          if [ "$CONTAINER_TAG" == "main" ]; then
            CONTAINER_TAG=latest
          else
            CONTAINER_TAG=$(echo "$CONTAINER_TAG" | sed 's/[^a-zA-Z0-9]\+/-/')
          fi

          docker buildx build ${{ inputs.buildx_args }} \
            --platform ${{ inputs.platforms }} \
            --cache-from type=gha \
            -t "${{ inputs.container_name }}:$CONTAINER_TAG" --push \
            ${{ inputs.path }}

      - uses: act10ns/slack@v1.5.1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: "#builds"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.BUILDS_WEBHOOK_URL }}
        if: always()
